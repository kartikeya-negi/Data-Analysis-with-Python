# -*- coding: utf-8 -*-
"""Data_Analysis_with_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/kartikeya-negi/Data-Analysis-with-Python/blob/main/Data_Analysis_with_Python.ipynb

# Most streamed songs of all time

Songs have now become an important part of our life.It helps in clearing our minds and focus on our work.In this analysis, I will explore the most played songs dataset through visualizations and graphs using matplotlib and seaborn.

## Downloading the Dataset

The following dataset is downloaded from kaggle.The dataset link is https://www.kaggle.com/iamsumat/spotify-top-2000s-mega-dataset
"""

!pip install jovian opendatasets --upgrade --quiet

"""Let's begin by downloading the data, and listing the files within the dataset."""

dataset_url = 'https://www.kaggle.com/iamsumat/spotify-top-2000s-mega-dataset'

import opendatasets as od
od.download(dataset_url)

"""The dataset has been downloaded and extracted."""

# Change this
data_dir = './spotify-top-2000s-mega-dataset'

import os
os.listdir(data_dir)

"""Let us save and upload our work to Jovian before continuing."""

project_name = "zerotopandas-course-project-songs" # change this (use lowercase letters and hyphens only)

!pip install jovian --upgrade -q

import jovian

jovian.commit(project=project_name)

"""## Installing and Importing Packages
We will install and import the packages required for this project
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline

"""## Data Preparation and Cleaning

We will load the dataset and perform necessary operations like handling missing or incorrect data



"""

import pandas as pd

songs_df = pd.read_csv('./spotify-top-2000s-mega-dataset/Spotify-2000.csv')
del songs_df["Index"]

songs_df

"""### Exploring the Data
Exploring the number of rows & columns, ranges of values etc.
"""

songs_df.shape

songs_df.info()

"""Here, we noticed that Length of the songs are in object data type so we need to convert the Length of the songs into int data type"""

songs_df['Length (Duration)'] = songs_df['Length (Duration)'].str.split(',').str.join('').astype(int)

"""Now, Let's check the Data Type of Length (Duration)"""

songs_df["Length (Duration)"].dtype

songs_df.describe()

"""### Parsing Dataset"""

songs_1900s_df = songs_df[songs_df.Year < 2000].copy()

songs_1900s_df.sample(10)

songs_2000s_df = songs_df[songs_df.Year >= 2000].copy()

songs_2000s_df.sample(10)

import jovian

jovian.commit()

"""## Exploratory Analysis and Visualization

Let's begin by importing`matplotlib.pyplot` and `seaborn`.
"""

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 13
matplotlib.rcParams['figure.figsize'] = (10, 6)
matplotlib.rcParams['figure.facecolor'] = '#00000000'

"""Let's see how many songs are released in particular year."""

plt.figure(figsize=(15,35))

songs_year_graph = sns.countplot(y=songs_df["Year"])

plt.xlabel("Number of Songs")
plt.title("Songs Released on Particular Year");

"""From the above graph we can tell that the most number of songs released in a particular year in the given dataset is 2008.

Let's see the average Energy in the songs released in particular year.
"""

plt.figure(figsize=(15,7))

songs_energy_graph = sns.lineplot(x=songs_df["Year"],
                                  y=songs_df["Energy"]);
plt.ylabel("Energy of Song");
plt.title("Average Energy of Songs released per Year");

"""As the years have passed by there has been great evolution in the song industry and we can tell the energy of songs have increased gradually i from the above graph.

Let's observe the average loudness of the songs released in particular year.
"""

plt.figure(figsize=(15,35))

songs_loudness_graph = sns.barplot(x=songs_df["Loudness (dB)"],
                                   y=songs_df["Year"],
                                   orient="h");

"""From the above chart we can easily tell that in the present time the people likes to hear to relaxing and sober music rather than heavy hip hop songs as compared to 1960's.

Let's see the average Popularity of songs per year.
"""

plt.figure(figsize=(15,6))

songs_popularity_graph = sns.lineplot(x=songs_df["Year"],
                                  y=songs_df["Popularity"],
                                  err_style="bars",
                                  ci=0);

plt.ylabel("Populairity of Song");
plt.title("Popularity of Songs released per Year");

"""As we can see that the craze of music amongst the people has been degrading from past few years.

Let's see Popularity and Loudness of the songs in particular year.
"""

plt.figure(figsize=(15,7))

songs_loudness_graph = sns.scatterplot(x=songs_df["Popularity"],
                                       y=songs_df["Loudness (dB)"],
                                       hue=songs_df["Year"],
                                       size=songs_df["Year"]);

plt.ylabel("Loudness of Song(dB)");
plt.xlabel("Popularity of Song");
plt.title("Popularity and Loudness of Songs released per Year");

"""Let us save and upload our work to Jovian before continuing"""

import jovian

jovian.commit()

"""## Asking and Answering Questions

#### Q1: Which are the most popular songs on Spotify of all time?
"""

popular_songs = songs_df.sort_values("Popularity",ascending = False).head(100)

popular_songs

"""We can see that the most popular song is Dance monkey by Tones and l released in 2019.We can see that there are many other popular songs in the list.

Now , It would be a great idea to plot these songs with respect to their normalized Popularity for getting better insights.

Here's the graphical representation for top 20 most popular songs on Spotify.
"""

plt.figure(figsize=(12,7))

popular_songs_graph = sns.barplot(x=popular_songs.Popularity,
                                  y=popular_songs.Title);

plt.xlabel("Popularity of Song");
plt.ylabel("Title of Song");
plt.title("Most Popular Songs of All time");

"""#### Q2: What is the relation between Danceability and Energy of Song?"""

plt.figure(figsize=(15,7))

sns.lineplot(x=songs_df["Year"],
             y=songs_df["Danceability"],
             ci=0);
sns.lineplot(x=songs_df["Year"],
             y=songs_df["Energy"],
             ci=0);

plt.legend(["Danceability of Song","Energy of Song"]);
plt.xlabel("Release Year");
plt.ylabel("Rating");
plt.title("Relation Between Danceability and Energy");

"""We can easily that the nowadays the songs are made so energetic that anyone can dance to these songs.

#### Q3: What are the Top 10 Genres of all time on Spotify?
"""

top_genres_df=songs_df.groupby(["Top Genre"],as_index=False)["Title"].count().sort_values('Title',ascending=False).head(10)
top_genres_df

"""The above table tells the most favorite genres on spotify.But it will better if we can see this data on a bar chart for better visualization and insights.

So,below is the graph for the above data.
"""

plt.figure(figsize=(12,6))

sns.barplot(x=top_genres_df["Title"],
            y=top_genres_df["Top Genre"]);

plt.xlabel("Title of Song");
plt.ylabel("Genre");
plt.title("Top Genres of All Time");

"""#### Q4: What songs were Released by Artists after 2000s?"""

top_popular_df=songs_2000s_df.groupby(["Artist","Year"],as_index=False)[["Title"]].count().sort_values('Title',ascending=False).head(40)

heatmap_df=top_popular_df.pivot("Artist","Year","Title").fillna(0)
heatmap_df

"""Many songs were released after 2000s by multiple artists.But it is difficult to tell that what are the total number of songs released by a particular artist.

So it would better to plot this data using some graph or map.
"""

plt.figure(figsize=(12,8))

sns.heatmap(heatmap_df,
            cmap="YlGnBu");

plt.title("Number of Songs Released by Artists");

"""Now we can easily tell that Coldplay has the most number of songs after 2000.

#### Q5: What is the average length (Duration) of the songs?
"""

plt.figure(figsize=(20,10))

sns.displot(x=songs_df["Length (Duration)"],
            kde=True);

plt.xlabel("Length (s)")
plt.title("Length (Duration) used in the Songs");

"""From the above histogram we can tell that the average duration of songs is around 165 seconds.

Let us save and upload our work to Jovian before continuing.
"""

import jovian

jovian.commit()

"""## Inferences and Conclusion

From the analysis we discovered these:
- Relation Between Energy and Danceability of Songs
- Most songs released by artist in 2000s
- Average Length of Songs
- Top Genres of All Time

After conducting exploratory data analysis on Most played songs of all time dataset, several key insights can be drawn. The trend between 1956 and 2019 can be studied to predict songs and artists. Important questions were asked and can be used to infer new questions and subsequently, their answers.Pandas, Matplotlib, and Seaborn was used for providing valuable insights and visualizations of the data. Pandas was used to clean and manipulate the data, Matplotlib,seaborn was used to create data visualizations.
"""

import jovian

jovian.commit()

"""## References and Future Work

- **Dataset** - https://www.kaggle.com/iamsumat/spotify-top-2000s-mega-dataset
- https://stackoverflow.com/questions/31594549/how-to-change-the-figure-size-of-a-seaborn-axes-or-figure-level-plot
- https://sparkbyexamples.com/pandas/pandas-get-cell-value-from-dataframe/#:~:text=In%20Pandas%2C%20DataFrame.loc%5B%5D,Duration%20column%20(3rd%20column).&text=Copy-,Yields%20below%20output.,'%5D%20returns%20a%20pandas%20Series.
- https://www.geeksforgeeks.org/python-pandas-series-tolist/
- https://www.geeksforgeeks.org/how-to-count-occurrences-of-specific-value-in-pandas-column/
- https://www.statology.org/seaborn-pie-chart/#:~:text=Seaborn%20Color%20Palette-,The%20following%20code%20shows%20how%20to%20create%20a%20pie%20chart,palette%20to%20use%20colors%20%3D%20sns.
- https://stackoverflow.com/questions/48590268/pandas-get-the-most-frequent-values-of-a-column
- https://www.geeksforgeeks.org/how-to-add-a-title-to-seaborn-plots/


### Future work
- EDA on Songs available on different platforms over the internet
- Songs catalog and rating System using python
- We can actually find many relation between other data provided in Dataset and discover new trends.

"""

import jovian

jovian.commit()

